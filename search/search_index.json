{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Cigare Volant","text":"<p>Si jamais le hasard vous am\u00e8ne ici, ce site est en construction. Vous y trouverez des guides et des tutoriels sur des sujets comme la programmation, le d\u00e9veloppement web et Linux.</p>"},{"location":"#tutoriels","title":"Tutoriels","text":"<ul> <li>Dockeriser une application avec Django, Postgres, Gunicorn et Nginx</li> </ul>"},{"location":"#guides","title":"Guides","text":"<ul> <li>Go pour les d\u00e9veloppeurs</li> <li>WSGI, une interface pour les serveurs et applications web</li> </ul>"},{"location":"guides/django_docker_gunicorn_nginx/","title":"Dockeriser une application avec Django, Postgres, Gunicorn et Nginx","text":""},{"location":"guides/django_docker_gunicorn_nginx/#prerequis","title":"Pr\u00e9requis","text":"<ul> <li>Docker</li> <li>Docker Compose</li> <li>Python 3.6 ou sup\u00e9rieur</li> </ul>"},{"location":"guides/django_docker_gunicorn_nginx/#creer-le-projet","title":"Cr\u00e9er le projet","text":"<p>Cr\u00e9ez un nouveau r\u00e9pertoire pour votre nouveau projet Django.</p> <pre><code>mkdir django_docker_gunicorn\ncd django_docker_gunicorn\nmkdir app\ncd app\n</code></pre> <p>Cr\u00e9ez et activez votre environnement virtuel.</p> <pre><code>python -m venv .venv --prompt=django\n\nsource .venv/bin/activate\npip install -U pip\n</code></pre> <p>Installez Django et cr\u00e9ez un nouveau projet.</p> <pre><code>pip install django\ndjango-admin startproject core .\npip freeze &gt; requirements.txt\n</code></pre> <p>Effectuez les migrations et lancez le serveur de d\u00e9veloppement.</p> <pre><code>python manage.py migrate\npython manage.py runserver\n</code></pre> <p>Visitez <code>http://localhost:8000/</code> pour v\u00e9rifier que le projet a bien \u00e9t\u00e9 cr\u00e9\u00e9.</p> <p>N'oubliez pas de supprimer le fichier db.sqlite3.</p> <p>Votre r\u00e9pertoire devrait ressembler \u00e0 ceci :</p> <pre><code>django_postgres_gunicorn_nginx\n\u2514\u2500\u2500 app\n    \u251c\u2500\u2500 core\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 asgi.py\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 __init__.py\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 settings.py\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 urls.py\n    \u2502\u00a0\u00a0 \u2514\u2500\u2500 wsgi.py\n    \u2514\u2500\u2500 manage.py\n</code></pre>"},{"location":"guides/django_docker_gunicorn_nginx/#docker","title":"Docker","text":"<p>Cr\u00e9er un fichier <code>Dockerfile</code> dans le r\u00e9pertoire app.</p> <pre><code>FROM python:3.11.4-slim-buster\n\nWORKDIR /usr/src/app\n\nENV PYTHONDONTWRITEBYTECODE 1\nENV PYTHONUNBUFFERED 1\n\nRUN pip install -U pip\nCOPY ./requirements.txt .\nRUN pip install -r requirements.txt\n\nCOPY . .\n</code></pre> <p>D\u00e9taillons ce fichier :</p> <ul> <li> <p>Les images python slim-buster sont des images l\u00e9g\u00e8res de python. Elles ne   contiennent que le strict minimum pour faire fonctionner python.</p> </li> <li> <p>La commande <code>WORKDIR</code> permet de d\u00e9finir le r\u00e9pertoire de travail pour toutes   les futures instructions RUN, CMO, ENTRYPOINT, COPY et ADD.   https://docs.docker.com/engine/reference/builder/#workdir</p> </li> <li> <p>La variable d'environnement <code>PYTHONDONTWRITEBYTECODE</code> permet de ne pas   g\u00e9n\u00e9rer de fichiers .pyc.   https://docs.python.org/3/using/cmdline.html#envvar-PYTHONDONTWRITEBYTECODE</p> </li> <li> <p>Et <code>PYTHONUNBUFFERED</code> permet de ne pas mettre en cache les sorties de stdout   et stderr.   https://docs.python.org/3/using/cmdline.html#envvar-PYTHONUNBUFFERED</p> </li> <li> <p>Puis, on met \u00e0 jour pip, on copie le fichier requirements.txt et on   installe les d\u00e9pendances.</p> </li> <li> <p>Enfin, on copie le reste du projet.</p> </li> </ul> <p>Ajoutez un fichier <code>compose.yaml</code> \u00e0 la racine du projet, \u00e0 c\u00f4t\u00e9 du r\u00e9pertoire <code>app</code>.</p> <p>Attention ! A partir de juillet 2023, Compose V1 ne sera plus support\u00e9. Vous trouvez ici des informations l\u00e9g\u00e8rement diff\u00e9rentes de ce qui vous pouvez voir ailleurs, dans d'autres guides pas forc\u00e9ment \u00e0 jour. https://docs.docker.com/compose/</p> <pre><code>services:\n  web:\n    build: app\n    command: python manage.py runserver 0.0.0.0:8000\n    ports:\n      - '8000:8000'\n</code></pre> <p>D\u00e9taillons ce fichier :</p> <ul> <li> <p><code>services</code> est la cl\u00e9 principale du fichier. Elle contient la liste des services qui seront cr\u00e9\u00e9s.</p> </li> <li> <p><code>web</code> est le nom du service. Il est arbitraire.</p> </li> <li> <p><code>build</code> permet de construire une image \u00e0 partir d'un Dockerfile. Ici, on lui  donne le chemin vers le r\u00e9pertoire <code>app</code>.</p> </li> <li> <p><code>command</code> permet de lancer une commande. Ici, on lance le serveur de d\u00e9veloppement  de Django.</p> </li> <li> <p><code>ports</code> permet de mapper un port du conteneur vers un port de la machine h\u00f4te.</p> </li> </ul>"},{"location":"guides/django_docker_gunicorn_nginx/#postgres","title":"Postgres","text":"<p>Nous allons maintenant ajouter une base de donn\u00e9es Postgres \u00e0 notre projet.</p> <p>Psycopg2 est un adaptateur de base de donn\u00e9es PostgreSQL pour le langage de programmation Python. Il permet aux programmes Python de faire des requ\u00eates SQL vers une base de donn\u00e9es PostgreSQL.</p> <p>psycopg2-binary est une version pr\u00e9compil\u00e9e de psycopg2. Elle est plus facile \u00e0 installer que psycopg2, mais elle est plus lourde. Vous pouvez utiliser psycopg2 \u00e0 la place si vous le souhaitez.</p> <p>Installez le module <code>psycopg2</code> et ajoutez-le \u00e0 vos d\u00e9pendances.</p> <pre><code>pip install psycopg2-binary\npip freeze &gt; requirements.txt\n</code></pre> <p>--WIP--</p>"},{"location":"guides/docker/","title":"Docker","text":""},{"location":"guides/docker/#introduction","title":"Introduction","text":""},{"location":"guides/docker/#quest-ce-que-docker","title":"Qu'est-ce que Docker ?","text":"<p>Docker est un logiciel libre permettant de lancer des applications dans des conteneurs logiciels. Il utilise les fonctionnalit\u00e9s de virtualisation du noyau Linux (cgroups, namespaces, etc.) et permet ainsi de fonctionner sans surcouche, contrairement aux machines virtuelles.</p> <p>--WIP--</p>"},{"location":"guides/wsgi/","title":"WSGI, une introduction","text":""},{"location":"guides/wsgi/#pourquoi-wsgi-est-necessaire","title":"Pourquoi WSGI est n\u00e9cessaire ?","text":""},{"location":"guides/wsgi/#le-probleme-de-la-portabilite","title":"Le probl\u00e8me de la portabilit\u00e9","text":"<p>Avant l'arriv\u00e9e de WSGI, le monde du d\u00e9veloppement web en Python \u00e9tait un peu comme le Far West. Chaque framework web avait son propre moyen de communiquer avec les serveurs web, et vice versa. Cela signifiait que si tu d\u00e9veloppais une application en utilisant un certain framework, tu \u00e9tais souvent li\u00e9 \u00e0 un serveur web sp\u00e9cifique. Changer de serveur web ou de framework pouvait \u00eatre un v\u00e9ritable casse-t\u00eate, n\u00e9cessitant des ajustements majeurs dans le code.</p>"},{"location":"guides/wsgi/#un-besoin-duniformite","title":"Un besoin d'uniformit\u00e9","text":"<p>Le manque d'un standard commun rendait \u00e9galement difficile la r\u00e9utilisation du code et des composants entre diff\u00e9rents projets et frameworks. Par exemple, si tu avais un morceau de middleware tr\u00e8s utile dans un projet Django, il \u00e9tait difficile de le transf\u00e9rer dans un projet Flask sans modifications importantes.</p>"},{"location":"guides/wsgi/#la-solution-wsgi","title":"La solution : WSGI","text":"<p>C'est l\u00e0 qu'intervient WSGI (Web Server Gateway Interface). WSGI agit comme un interm\u00e9diaire entre le serveur web et l'application web, permettant une communication fluide entre les deux, quel que soit le serveur web ou le framework utilis\u00e9. En d'autres termes, WSGI est un contrat qui dit : \"Si tu suis ces r\u00e8gles, ton application web pourra communiquer avec n'importe quel serveur web qui suit \u00e9galement ces r\u00e8gles, et vice versa.\"</p>"},{"location":"guides/wsgi/#les-avantages","title":"Les avantages","text":"<ol> <li>Portabilit\u00e9 : Tu peux facilement passer d'un serveur web \u00e0 un autre sans    avoir \u00e0 r\u00e9\u00e9crire ton application.</li> <li>R\u00e9utilisabilit\u00e9 : Les composants, comme les middlewares, peuvent \u00eatre    r\u00e9utilis\u00e9s entre diff\u00e9rents projets et frameworks.</li> <li>Flexibilit\u00e9 : Tu as la libert\u00e9 de choisir le serveur web et le framework    qui correspondent le mieux \u00e0 tes besoins, sans \u00eatre enferm\u00e9 dans un    \u00e9cosyst\u00e8me particulier.</li> </ol> <p>En r\u00e9sum\u00e9, WSGI apporte une standardisation bien n\u00e9cessaire \u00e0 l'\u00e9cosyst\u00e8me Python pour le d\u00e9veloppement web, rendant la vie beaucoup plus facile pour nous, les d\u00e9veloppeurs.</p>"},{"location":"guides/wsgi/#terminologie","title":"Terminologie","text":""},{"location":"guides/wsgi/#interface-wsgi","title":"Interface WSGI","text":"<p>L'interface WSGI a deux parties: la partie serveur ou gateway et la partie application ou framework. La partie serveur appelle un objet callable (g\u00e9n\u00e9ralement une fonction) qui est la partie application.</p>"},{"location":"guides/wsgi/#application-wsgi","title":"Application WSGI","text":"<p>Une application WSGI est un programme Python qui se conforme \u00e0 la sp\u00e9cification WSGI. Elle prend en charge deux arguments : un dictionnaire d'environnement (<code>environ</code>) et une fonction de d\u00e9marrage de r\u00e9ponse (<code>start_response</code>). L'application renvoie un it\u00e9rable pour le corps de la r\u00e9ponse HTTP.</p>"},{"location":"guides/wsgi/#serveur-wsgi","title":"Serveur WSGI","text":"<p>Un serveur WSGI est un serveur web qui sait comment interagir avec une application WSGI. Il passe les informations de la requ\u00eate HTTP \u00e0 l'application via le dictionnaire <code>environ</code> et re\u00e7oit les d\u00e9tails de la r\u00e9ponse via <code>start_response</code>.</p>"},{"location":"guides/wsgi/#middleware-wsgi","title":"Middleware WSGI","text":"<p>Un middleware WSGI est un composant qui se situe entre le serveur WSGI et l'application WSGI. Il peut modifier la requ\u00eate ou la r\u00e9ponse, ou m\u00eame d\u00e9cider de ne pas appeler l'application du tout. On peut encha\u00eener plusieurs middlewares les uns \u00e0 la suite des autres.</p>"},{"location":"guides/wsgi/#environ","title":"<code>environ</code>","text":"<p>C'est un dictionnaire Python qui contient toutes les variables d'environnement HTTP. Il est pass\u00e9 de votre serveur WSGI \u00e0 votre application WSGI.</p>"},{"location":"guides/wsgi/#start_response","title":"<code>start_response</code>","text":"<p>C'est fonction callback que le serveur WSGI passe \u00e0 l'application WSGI. L'application l'appelle pour d\u00e9finir les en-t\u00eates de la r\u00e9ponse HTTP et le code de statut.</p>"},{"location":"guides/wsgi/#reponse-iterable","title":"R\u00e9ponse it\u00e9rable","text":"<p>L'application WSGI doit renvoyer un it\u00e9rable pour le corps de la r\u00e9ponse HTTP. Le serveur WSGI it\u00e8re sur cet it\u00e9rable pour obtenir les donn\u00e9es de la r\u00e9ponse.</p> <p>--WIP--</p>"},{"location":"guides/go/00_hello_world/","title":"Hello World","text":"<p>Ceci est un guide destin\u00e9 aux d\u00e9veloppeurs pour avoir un rapide aper\u00e7u du langage Go.</p>"},{"location":"guides/go/00_hello_world/#installation","title":"Installation","text":"<p>Pour installer Go sur votre machine :</p> <p>Linux</p> <p>Utiliser le gestionnaire de paquets de votre distribution.</p> <pre><code>sudo apt-get install golang\n</code></pre> <p>ou</p> <pre><code>sudo pacman -S go\n</code></pre> <p>par exemple.</p> <p>Ou suivre les instructions du site officiel.</p> <ol> <li>T\u00e9l\u00e9charger l'archive sur le site officiel.</li> <li>Supprimer l'installation pr\u00e9c\u00e9dente si besoin.</li> </ol> <pre><code>sudo rm -rf /usr/local/go\n</code></pre> <ol> <li>Extraire l'archive dans /usr/local</li> </ol> <pre><code>sudo tar -C /usr/local -xzf go1.21.0.linux-amd64.tar.gz\n</code></pre> <ol> <li>Ajouter /usr/local/go/bin \u00e0 la variable d'environnement PATH</li> </ol> <pre><code>export PATH=$PATH:/usr/local/go/bin\n</code></pre> <ol> <li>V\u00e9rifier que l'installation est fonctionnelle</li> </ol> <pre><code>go version\n</code></pre> <p>MacOS</p> <ol> <li>Ouvrir le fichier .pkg t\u00e9l\u00e9charg\u00e9.</li> <li>Suivre les instructions.</li> <li>Red\u00e9marrer le terminal si besoin.</li> <li>V\u00e9rifier que l'installation est fonctionnelle</li> </ol> <pre><code>go version\n</code></pre> <p>Windows</p> <ol> <li>Ouvrir le fichier .msi t\u00e9l\u00e9charg\u00e9.</li> <li>Suivre les instructions.</li> <li>Lancez l'invite de commande.</li> <li>V\u00e9rifier que l'installation est fonctionnelle</li> </ol> <pre><code>go version\n</code></pre>"},{"location":"guides/go/00_hello_world/#loutil-go-en-ligne-de-commande","title":"L'outil Go en ligne de commande","text":"<p>Il est utilis\u00e9 pour diverses t\u00e2ches, allant de la gestion des d\u00e9pendances au build et \u00e0 l'ex\u00e9cution de vos programmes. Pour commencer, vous pouvez cr\u00e9er un projet Go en utilisant la commande <code>go mod init</code> suivie du nom de votre module. Cette commande cr\u00e9e un fichier go.mod qui enregistre vos d\u00e9pendances. Vous pouvez ensuite utiliser <code>go build</code> pour compiler votre code source en ex\u00e9cutable. Utilisez go run pour ex\u00e9cuter imm\u00e9diatement un fichier source sans compilation pr\u00e9alable. L'outil go offre \u00e9galement des fonctionnalit\u00e9s pour tester votre code avec <code>go test</code>, formater votre code avec <code>go fmt</code>, et plus encore. Vous pouvez lister toutes les commandes disponibles avec <code>go help</code>.</p> <p>Pour cr\u00e9er un projet Go et activer le suivi des d\u00e9pendances pour votre code, utilisez la commande <code>go mod init</code>. Vous cr\u00e9erez ainsi un fichier go.mod , en sp\u00e9cifiant le nom du module de votre code, connu sous le nom de chemin de module. Ce fichier aide \u00e0 g\u00e9rer les d\u00e9pendances et est g\u00e9n\u00e9ralement bas\u00e9 sur l'emplacement de votre d\u00e9p\u00f4t de code source. Si vous pr\u00e9voyez de partager votre module, le chemin du module doit \u00eatre un emplacement valide \u00e0 partir duquel les outils Go peuvent le r\u00e9cup\u00e9rer.</p> <p>Vous pouvez utiliser un chemin de d\u00e9p\u00f4t Github, par exemple <code>votre_compte_github/votre_projet</code>.</p> <p>Pour ce guide, nous allons utiliser <code>example/hello</code>.</p> <pre><code>mkdir hello\ncd hello\ngo mod init example/hello\n</code></pre> <p>Cr\u00e9ez un fichier <code>hello.go</code> avec le contenu suivant :</p> <pre><code>package main\n\nimport \"fmt\"\n\nfunc main() {\n    fmt.Println(\"Hello, world.\")\n}\n</code></pre> <p>Ex\u00e9cutez le programme avec la commande <code>go run</code> :</p> <pre><code>go run hello.go\n</code></pre>"},{"location":"guides/go/00_hello_world/#hello-world_1","title":"Hello World","text":"<p>Dans le r\u00e9pertoire pr\u00e9c\u00e9demment cr\u00e9\u00e9, cr\u00e9ez un autre fichier <code>hello.go</code> avec le contenu suivant :</p> <pre><code>package main\n\nimport \"fmt\"\n\nfunc main() {\n    fmt.Println(\"Hello, world.\")\n}\n</code></pre> <p>Compilez et \u00e9x\u00e9cutez le programme avec la commande <code>go run</code> :</p> <pre><code>go run hello.go\n</code></pre>"}]}